{ String | Array<String>}
{!Array.<module:jsdoc/doclet.Doclet>}
{!Array.<number>}
{!Object}
{!string}
{(!Array.<number>|!Array.<!Array.<number>>)}
{(Object|string)}
{(module:jsdoc/package.Package~PersonInfo|string)}
{(string|Object|Array)}
{(string|module:jsdoc/package.Package~BugInfo)}
{(string|number)}
{(string|number|boolean)}
{(string|number|boolean|Object|Array)}
{*}
{...*=}
{...*}
{?Tutorial}
{?string}
{Array.<(module:jsdoc/package.Package~PersonInfo|string)>}
{Array.<Object>}
{Array.<module:jsdoc/doclet.Doclet>}
{Array.<module:jsdoc/package.Package~LicenseInfo>}
{Array.<module:jsdoc/tag/inline.InlineTagInfo>}
{Array.<string>}
{Array<*>}
{Array<string>}
{Array}
{Bar}
{Boolean}
{Buffer}
{Class}
{Color}
{Connection}
{Data#point}
{Date}
{Dispenser}
{Error}
{Function}
{IConnection}
{ITester}
{IWorker}
{InvalidArgumentException}
{Manager}
{MouseButtons}
{MyClass}
{Number}
{Object.<string, Array.<module:jsdoc/doclet.Doclet>>}
{Object.<string, number>}
{Object<string, string>}
{Object?}
{Object}
{Packet}
{Person~sayCallback}
{PizzaToppings}
{RegExp}
{Socket}
{String}
{TAFFY}
{Tutorial}
{User}
{Widget}
{array<object>}
{array<string>}
{astnode}
{boolean=}
{boolean}
{calc.NumberLike}
{character}
{function?}
{function}
{jasmine.Env}
{jasmine.ExpectationResult|jasmine.NestedResults}
{jasmine.ExpectationResult}
{jasmine.Reporter}
{jasmine.Spec}
{jasmine.Spy|Object}
{jasmine.Suite}
{jsdoc.tutorial.Tutorial}
{module:jsdoc/doclet.Doclet?}
{module:jsdoc/doclet.Doclet}
{module:jsdoc/name.SCOPE.NAMES}
{module:jsdoc/package.Package~RepositoryInfo}
{module:jsdoc/src/parser.Parser}
{module:jsdoc/tag/dictionary.Dictionary}
{module:jsdoc/tag/dictionary}
{module:jsdoc/tag/inline.InlineTagInfo}
{module:jsdoc/tag/inline.InlineTagReplacer}
{module:jsdoc/tag/inline.InlineTagResult}
{module:jsdoc/tag/type.TagInfo}
{module:jsdoc/tag/type.TypeExpressionInfo}
{module:jsdoc/tutorial.Root}
{module:jsdoc/tutorial.Tutorial}
{module:jsdoc/util/logger.LEVELS}
{node}
{number|MyClass}
{number}
{object=}
{object|function}
{object}
{requestResponseCallback}
{string=}
{string[]}
{string|Array<string>}
{string|RegExp}
{string|String[]}
{string}
{this}
{void}
{wrongTypeCallback}
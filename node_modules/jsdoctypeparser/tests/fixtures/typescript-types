{number}
{{ object: with, comma: separator }}
{{ object: with, trailing: comma, }}
// {{ object: with\n linebreak: separator }}
// {{ object: with\n linebreak: separators\n }}
{typeof A}
{typeof}
{X<typeof>}
{X<typeof A>}
{(typeof X)<A>}
{(typeof A)}
{...typeof A}
{typeof A...}
{typeof A | number}
{number | typeof A}
{typeof N[]}
{keyof A}
{keyof}
{X<keyof>}
{X<keyof A>}
{(keyof X)<A>}
{(keyof A)}
{...keyof A}
{keyof A...}
{keyof A | number}
{number | keyof A}
{keyof N[]}
{function(typeof A)}
{function(typeof A, number)}
{function(number, typeof A)}
{function(): typeof A}
{function(keyof A)}
{function(keyof A, number)}
{function(number, keyof A)}
{function(): keyof A}
{import("x")}
{import("./x")}
{import("../x")}
{import("x").T}
{import("x").T.U}
{import("x").T.U<V,W>}
{(x: *) => *}
{(x: number) => string}
{(x: number, y: string, z: Class) => string}
//{( arrow: Function, with: TrailingComma, ) => string}
{() => string}
{function(): () => string}
{function(() => string): void}
//{function( TrailingComma, ): string}
{X<() => string>}
{new (x: number) => string}
// The empty tuple:
{[]}
{[x]}
{[it, needs, to, be]}
{[ tuple, with, spaces ]}
//{[ tuple, with, trailing, comma, ]}
{[][]}
{[tuple, array][]}
{[variadic, arguments, ...tuple]}
{[tuple, with, typeof foo]}
{[ tuple, with, typeof foo, and, ...rest ]}
{[tuple, with, keyof foo]}
{[ tuple, with, keyof foo, and, ...rest ]}
{[ tuple, with, typeof foo, and, keyof foo]}
{[ tuple, with, typeof foo, keyof foo, and, ...rest ]}
{{ object?: string, key: string }}
//{(own: list, of: constituents) => x}
//{{ (own: list, constituents): x }}
//{{ new (own: list, constituents): x }}
//{{ [n: number]: number }}
//{{ [s: string]: string }}
//{{ [T in keyof P]: T[K] }}
//{X extends Y ? U : V}

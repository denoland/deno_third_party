{"version":3,"sources":["../../src/bin/generateReadme.js"],"names":["trimCode","code","lines","replace","trimEnd","split","firsLineIndentation","match","lastLineIndentation","length","firstIndentSize","lastIndentSize","map","line","index","lineIndentSize","Math","min","slice","join","formatCodeSnippet","setup","paragraphs","push","settings","JSON","stringify","options","errors","message","getAssertions","assertionFiles","glob","sync","path","resolve","__dirname","assertionNames","filePath","basename","assertionCodes","codes","require","invalid","_","valid","zipObject","getSomeBranch","gitConfig","fs","readFileSync","toString","exec","branch","generateReadme","assertions","gitdown","Gitdown","readFile","setConfig","gitinfo","defaultBranchName","gitPath","documentBody","get","assertionsBlock","ruleName","ruleAssertions","Error","generateReadmeAndWriteToDisk","readme","dist","writeFileSync","assertReadmeIsUpToDate","readmePath","isUpToDate","main","hasCheckFlag","process","argv","some","arg","error","console","exit"],"mappings":";;;;;;;AAGA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;AAEA,MAAMA,QAAQ,GAAIC,IAAD,IAAU;AACzB,MAAIC,KAAK,GAAGD,IAAI,CAACE,OAAL,CAAa,KAAb,EAAoB,EAApB,EAAwBC,OAAxB,GAAkCC,KAAlC,CAAwC,IAAxC,CAAZ;AAEA,QAAMC,mBAAmB,GAAGJ,KAAK,CAAC,CAAD,CAAL,CAASK,KAAT,CAAe,MAAf,CAA5B;AACA,QAAMC,mBAAmB,GAAGN,KAAK,CAACA,KAAK,CAACO,MAAN,GAAe,CAAhB,CAAL,CAAwBF,KAAxB,CAA8B,MAA9B,CAA5B;AAEA,QAAMG,eAAe,GAAGJ,mBAAmB,GAAGA,mBAAmB,CAAC,CAAD,CAAnB,CAAuBG,MAA1B,GAAmC,CAA9E;AACA,QAAME,cAAc,GAAGH,mBAAmB,GAAGA,mBAAmB,CAAC,CAAD,CAAnB,CAAuBC,MAA1B,GAAmC,CAA7E;AAEAP,EAAAA,KAAK,GAAGA,KAAK,CAACU,GAAN,CAAU,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACjC,UAAMC,cAAc,GAAGL,eAAe,KAAK,CAApB,IAAyBI,KAAK,KAAK,CAAnC,GACrBE,IAAI,CAACC,GAAL,CAASP,eAAT,EAA0BC,cAA1B,CADqB,GAErBA,cAFF;AAIA,WAAOE,IAAI,CAACK,KAAL,CAAWH,cAAX,CAAP;AACD,GANO,CAAR;AAQA,SAAOb,KAAK,CAACiB,IAAN,CAAW,IAAX,CAAP;AACD,CAlBD;;AAoBA,MAAMC,iBAAiB,GAAIC,KAAD,IAAW;AACnC,QAAMC,UAAU,GAAG,EAAnB;AAEAA,EAAAA,UAAU,CAACC,IAAX,CAAgBvB,QAAQ,CAACqB,KAAK,CAACpB,IAAP,CAAxB;;AAEA,MAAIoB,KAAK,CAACG,QAAV,EAAoB;AAClBF,IAAAA,UAAU,CAACC,IAAX,CAAiB,gBAAeE,IAAI,CAACC,SAAL,CAAeL,KAAK,CAACG,QAArB,CAA+B,EAA/D;AACD;;AAED,MAAIH,KAAK,CAACM,OAAV,EAAmB;AACjBL,IAAAA,UAAU,CAACC,IAAX,CAAiB,eAAcE,IAAI,CAACC,SAAL,CAAeL,KAAK,CAACM,OAArB,CAA8B,EAA7D;AACD;;AAED,MAAIN,KAAK,CAACO,MAAV,EAAkB;AAChBN,IAAAA,UAAU,CAACC,IAAX,CAAiB,eAAcF,KAAK,CAACO,MAAN,CAAa,CAAb,EAAgBC,OAAQ,EAAvD;AACD;;AAED,SAAOP,UAAU,CAACH,IAAX,CAAgB,IAAhB,CAAP;AACD,CAlBD;;AAoBA,MAAMW,aAAa,GAAG,MAAM;AAC1B,QAAMC,cAAc,GAAGC,cAAKC,IAAL,CAAUC,cAAKC,OAAL,CAAaC,SAAb,EAAwB,kCAAxB,CAAV,CAAvB;;AAEA,QAAMC,cAAc,GAAGN,cAAc,CAACnB,GAAf,CAAoB0B,QAAD,IAAc;AACtD,WAAOJ,cAAKK,QAAL,CAAcD,QAAd,EAAwB,KAAxB,CAAP;AACD,GAFsB,CAAvB;AAIA,QAAME,cAAc,GAAGT,cAAc,CAACnB,GAAf,CAAoB0B,QAAD,IAAc;AACtD;AACA,UAAMG,KAAK,GAAGC,OAAO,CAACJ,QAAD,CAArB;;AAEA,WAAO;AACLK,MAAAA,OAAO,EAAEC,gBAAEhC,GAAF,CAAM6B,KAAK,CAACE,OAAZ,EAAqBvB,iBAArB,CADJ;AAELyB,MAAAA,KAAK,EAAED,gBAAEhC,GAAF,CAAM6B,KAAK,CAACI,KAAZ,EAAmBzB,iBAAnB;AAFF,KAAP;AAID,GARsB,CAAvB;AAUA,SAAOwB,gBAAEE,SAAF,CAAYT,cAAZ,EAA4BG,cAA5B,CAAP;AACD,CAlBD;;AAoBA,MAAMO,aAAa,GAAG,MAAM;AAC1B,QAAMC,SAAS,GAAGC,YAAGC,YAAH,CAAgBhB,cAAKf,IAAL,CAAUiB,SAAV,EAAqB,mBAArB,CAAhB,EAA2De,QAA3D,EAAlB;;AAD0B,eAEP,uBAAuBC,IAAvB,CAA4BJ,SAA5B,KAA0C,EAFnC;AAAA;AAAA,QAEjBK,MAFiB;;AAI1B,SAAOA,MAAP;AACD,CALD;;AAOA,MAAMC,cAAc;AAAA;AAAA;AAAA,gCAAG,aAAY;AACjC,UAAMC,UAAU,GAAGzB,aAAa,EAAhC;;AACA,UAAM0B,OAAO,GAAGC,iBAAQC,QAAR,CAAiBxB,cAAKf,IAAL,CAAUiB,SAAV,EAAqB,yBAArB,CAAjB,CAAhB;;AAEAoB,IAAAA,OAAO,CAACG,SAAR,CAAkB;AAChBC,MAAAA,OAAO,EAAE;AACPC,QAAAA,iBAAiB,EAAEd,aAAa,MAAM,QAD/B;AAEPe,QAAAA,OAAO,EAAE5B,cAAKf,IAAL,CAAUiB,SAAV,EAAqB,YAArB;AAFF;AADO,KAAlB;AAMA,QAAI2B,YAAY,SAASP,OAAO,CAACQ,GAAR,EAAzB;AAEAD,IAAAA,YAAY,GAAGA,YAAY,CAAC5D,OAAb,CAAqB,iCAArB,EAAyD8D,eAAD,IAAqB;AAC1F,YAAMC,QAAQ,GAAGD,eAAe,CAAC1D,KAAhB,CAAsB,sBAAtB,EAA8C,CAA9C,CAAjB;AACA,YAAM4D,cAAc,GAAGZ,UAAU,CAACW,QAAD,CAAjC;;AAEA,UAAI,CAACC,cAAL,EAAqB;AACnB,cAAM,IAAIC,KAAJ,CAAW,qCAAoCF,QAAS,IAAxD,CAAN;AACD;;AAED,aAAO,gEAAgEC,cAAc,CAACxB,OAAf,CAAuBxB,IAAvB,CAA4B,MAA5B,CAAhE,GACL,2EADK,GACyEgD,cAAc,CAACtB,KAAf,CAAqB1B,IAArB,CAA0B,MAA1B,CADzE,GAC6G,UADpH;AAED,KAVc,CAAf;AAYA,WAAO4C,YAAP;AACD,GAzBmB;;AAAA,kBAAdT,cAAc;AAAA;AAAA;AAAA,GAApB;;AA2BA,MAAMe,4BAA4B;AAAA;AAAA;AAAA,gCAAG,aAAY;AAC/C,UAAMC,MAAM,SAAShB,cAAc,EAAnC;;AACA,UAAMiB,IAAI,GAAGrC,cAAKf,IAAL,CAAUiB,SAAV,EAAqB,IAArB,EAA2B,IAA3B,EAAiC,WAAjC,CAAb;;AACAa,gBAAGuB,aAAH,CAAiBD,IAAjB,EAAuBD,MAAvB;AACD,GAJiC;;AAAA,kBAA5BD,4BAA4B;AAAA;AAAA;AAAA,GAAlC;;AAMA,MAAMI,sBAAsB;AAAA;AAAA;AAAA,gCAAG,aAAY;AACzC,UAAMH,MAAM,SAAShB,cAAc,EAAnC;;AACA,UAAMoB,UAAU,GAAGxC,cAAKf,IAAL,CAAUiB,SAAV,EAAqB,IAArB,EAA2B,IAA3B,EAAiC,WAAjC,CAAnB;;AAEA,UAAMuC,UAAU,GAAG1B,YAAGC,YAAH,CAAgBwB,UAAhB,EAA4BvB,QAA5B,OAA2CmB,MAA9D;;AAEA,QAAI,CAACK,UAAL,EAAiB;AACf,YAAM,IAAIP,KAAJ,CAAU,4EAAV,CAAN;AACD;AACF,GAT2B;;AAAA,kBAAtBK,sBAAsB;AAAA;AAAA;AAAA,GAA5B;;AAWA,MAAMG,IAAI;AAAA;AAAA;AAAA,gCAAG,aAAY;AACvB,QAAI;AACF,YAAMC,YAAY,GAAGC,OAAO,CAACC,IAAR,CAAaC,IAAb,CAAmBC,GAAD,IAAS;AAC9C,eAAOA,GAAG,KAAK,SAAf;AACD,OAFoB,CAArB;;AAIA,UAAIJ,YAAJ,EAAkB;AAChB,cAAMJ,sBAAsB,EAA5B;AACD,OAFD,MAEO;AACL,cAAMJ,4BAA4B,EAAlC;AACD;AACF,KAVD,CAUE,OAAOa,KAAP,EAAc;AACd;AACAC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACA;;AACAJ,MAAAA,OAAO,CAACM,IAAR,CAAa,CAAb;AACD;AACF,GAjBS;;AAAA,kBAAJR,IAAI;AAAA;AAAA;AAAA,GAAV;;AAmBAA,IAAI;eAEWtB,c","sourcesContent":["/**\n * This script is used to inline assertions into the README.md documents.\n */\nimport path from 'path';\nimport fs from 'fs';\nimport _ from 'lodash';\nimport glob from 'glob';\nimport Gitdown from 'gitdown';\n\nconst trimCode = (code) => {\n  let lines = code.replace(/^\\n/, '').trimEnd().split('\\n');\n\n  const firsLineIndentation = lines[0].match(/^\\s+/);\n  const lastLineIndentation = lines[lines.length - 1].match(/^\\s+/);\n\n  const firstIndentSize = firsLineIndentation ? firsLineIndentation[0].length : 0;\n  const lastIndentSize = lastLineIndentation ? lastLineIndentation[0].length : 0;\n\n  lines = lines.map((line, index) => {\n    const lineIndentSize = firstIndentSize !== 0 || index === 0 ?\n      Math.min(firstIndentSize, lastIndentSize) :\n      lastIndentSize;\n\n    return line.slice(lineIndentSize);\n  });\n\n  return lines.join('\\n');\n};\n\nconst formatCodeSnippet = (setup) => {\n  const paragraphs = [];\n\n  paragraphs.push(trimCode(setup.code));\n\n  if (setup.settings) {\n    paragraphs.push(`// Settings: ${JSON.stringify(setup.settings)}`);\n  }\n\n  if (setup.options) {\n    paragraphs.push(`// Options: ${JSON.stringify(setup.options)}`);\n  }\n\n  if (setup.errors) {\n    paragraphs.push(`// Message: ${setup.errors[0].message}`);\n  }\n\n  return paragraphs.join('\\n');\n};\n\nconst getAssertions = () => {\n  const assertionFiles = glob.sync(path.resolve(__dirname, '../../test/rules/assertions/*.js'));\n\n  const assertionNames = assertionFiles.map((filePath) => {\n    return path.basename(filePath, '.js');\n  });\n\n  const assertionCodes = assertionFiles.map((filePath) => {\n    // eslint-disable-next-line global-require, import/no-dynamic-require\n    const codes = require(filePath);\n\n    return {\n      invalid: _.map(codes.invalid, formatCodeSnippet),\n      valid: _.map(codes.valid, formatCodeSnippet),\n    };\n  });\n\n  return _.zipObject(assertionNames, assertionCodes);\n};\n\nconst getSomeBranch = () => {\n  const gitConfig = fs.readFileSync(path.join(__dirname, '../../.git/config')).toString();\n  const [, branch] = /\\[branch \"([^\"]+)\"\\]/.exec(gitConfig) || [];\n\n  return branch;\n};\n\nconst generateReadme = async () => {\n  const assertions = getAssertions();\n  const gitdown = Gitdown.readFile(path.join(__dirname, '../../.README/README.md'));\n\n  gitdown.setConfig({\n    gitinfo: {\n      defaultBranchName: getSomeBranch() || 'master',\n      gitPath: path.join(__dirname, '../../.git'),\n    },\n  });\n  let documentBody = await gitdown.get();\n\n  documentBody = documentBody.replace(/<!-- assertions ([a-z]+?) -->/ig, (assertionsBlock) => {\n    const ruleName = assertionsBlock.match(/assertions ([a-z]+)/i)[1];\n    const ruleAssertions = assertions[ruleName];\n\n    if (!ruleAssertions) {\n      throw new Error(`No assertions available for rule \"${ruleName}\".`);\n    }\n\n    return 'The following patterns are considered problems:\\n\\n````js\\n' + ruleAssertions.invalid.join('\\n\\n') +\n      '\\n````\\n\\nThe following patterns are not considered problems:\\n\\n````js\\n' + ruleAssertions.valid.join('\\n\\n') + '\\n````\\n';\n  });\n\n  return documentBody;\n};\n\nconst generateReadmeAndWriteToDisk = async () => {\n  const readme = await generateReadme();\n  const dist = path.join(__dirname, '..', '..', 'README.md');\n  fs.writeFileSync(dist, readme);\n};\n\nconst assertReadmeIsUpToDate = async () => {\n  const readme = await generateReadme();\n  const readmePath = path.join(__dirname, '..', '..', 'README.md');\n\n  const isUpToDate = fs.readFileSync(readmePath).toString() === readme;\n\n  if (!isUpToDate) {\n    throw new Error('Readme is not up to date, please run `npm run create-readme` to update it.');\n  }\n};\n\nconst main = async () => {\n  try {\n    const hasCheckFlag = process.argv.some((arg) => {\n      return arg === '--check';\n    });\n\n    if (hasCheckFlag) {\n      await assertReadmeIsUpToDate();\n    } else {\n      await generateReadmeAndWriteToDisk();\n    }\n  } catch (error) {\n    /* eslint-disable-next-line no-console */\n    console.error(error);\n    /* eslint-disable-next-line no-process-exit */\n    process.exit(1);\n  }\n};\n\nmain();\n\nexport default generateReadme;\n"],"file":"generateReadme.js"}
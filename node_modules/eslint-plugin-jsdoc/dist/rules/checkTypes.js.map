{"version":3,"sources":["../../src/rules/checkTypes.js"],"names":["strictNativeTypes","jsdocNode","sourceCode","report","utils","settings","context","jsdocTags","filterTags","tag","tagMightHaveType","preferredTypes","optionObj","options","noDefaults","_","get","unifyParentAndChildTypeChecks","forEach","jsdocTag","invalidTypes","typeAst","type","error","getPreferredTypeInfo","nodeName","parentName","parentNode","hasMatchingPreferredType","isGenericMatch","typeName","Object","keys","length","parentType","syntax","some","checkPostFix","syn","undefined","directNameMatch","unifiedSyntaxParentMatch","adjustNames","preferred","node","ret","meta","dotBracketEnd","match","slice","bracketEnd","endsWith","name","replace","includes","preferredSetting","push","reportSettings","strictNativeType","toLowerCase","fixedType","tagName","badType","preferredType","message","fix","fixer","replaceText","getText","tagValue","iterateAllJsdocs","fixable","schema","additionalProperties","properties"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport {parse, traverse, publish} from 'jsdoctypeparser';\nimport iterateJsdoc from '../iterateJsdoc';\n\nconst strictNativeTypes = [\n  'undefined',\n  'null',\n  'boolean',\n  'number',\n  'bigint',\n  'string',\n  'symbol',\n  'object',\n  'Array',\n  'Function',\n  'Date',\n  'RegExp',\n];\n\nexport default iterateJsdoc(({\n  jsdocNode,\n  sourceCode,\n  report,\n  utils,\n  settings,\n  context,\n}) => {\n  const jsdocTags = utils.filterTags((tag) => {\n    return utils.tagMightHaveType(tag.tag);\n  });\n\n  const {preferredTypes} = settings;\n  const optionObj = context.options[0];\n  const noDefaults = _.get(optionObj, 'noDefaults');\n  const unifyParentAndChildTypeChecks = _.get(optionObj, 'unifyParentAndChildTypeChecks');\n\n  jsdocTags.forEach((jsdocTag) => {\n    const invalidTypes = [];\n    let typeAst;\n\n    try {\n      typeAst = parse(jsdocTag.type);\n    } catch (error) {\n      return;\n    }\n\n    const getPreferredTypeInfo = (type, nodeName, parentName, parentNode) => {\n      let hasMatchingPreferredType;\n      let isGenericMatch;\n      let typeName = nodeName;\n      if (Object.keys(preferredTypes).length) {\n        const parentType = parentName === 'subject';\n        if (unifyParentAndChildTypeChecks || parentType) {\n          const syntax = _.get(parentNode, 'meta.syntax');\n\n          [\n            ['.', 'ANGLE_BRACKET_WITH_DOT'],\n            ['.<>', 'ANGLE_BRACKET_WITH_DOT'],\n            ['<>', 'ANGLE_BRACKET'],\n          ].some(([checkPostFix, syn]) => {\n            isGenericMatch = _.get(\n              preferredTypes,\n              nodeName + checkPostFix\n            ) !== undefined &&\n              syntax === syn;\n            if (isGenericMatch) {\n              typeName += checkPostFix;\n            }\n\n            return isGenericMatch;\n          });\n          if (!isGenericMatch && parentType) {\n            [\n              ['[]', 'SQUARE_BRACKET'],\n              ['.', 'ANGLE_BRACKET_WITH_DOT'],\n              ['.<>', 'ANGLE_BRACKET_WITH_DOT'],\n              ['<>', 'ANGLE_BRACKET'],\n            ].some(([checkPostFix, syn]) => {\n              isGenericMatch = _.get(preferredTypes, checkPostFix) !== undefined &&\n                syntax === syn;\n              if (isGenericMatch) {\n                typeName = checkPostFix;\n              }\n\n              return isGenericMatch;\n            });\n          }\n        }\n        const directNameMatch = _.get(preferredTypes, nodeName) !== undefined;\n        const unifiedSyntaxParentMatch = parentType && directNameMatch && unifyParentAndChildTypeChecks;\n        isGenericMatch = isGenericMatch || unifiedSyntaxParentMatch;\n\n        hasMatchingPreferredType = isGenericMatch ||\n          directNameMatch && !parentType;\n      }\n\n      return [hasMatchingPreferredType, typeName, isGenericMatch];\n    };\n\n    const adjustNames = (type, preferred, isGenericMatch, nodeName, node, parentNode) => {\n      let ret = preferred;\n      if (isGenericMatch) {\n        if (preferred === '[]') {\n          parentNode.meta.syntax = 'SQUARE_BRACKET';\n          ret = 'Array';\n        } else {\n          const dotBracketEnd = preferred.match(/\\.(?:<>)?$/);\n          if (dotBracketEnd) {\n            parentNode.meta.syntax = 'ANGLE_BRACKET_WITH_DOT';\n            ret = preferred.slice(0, -dotBracketEnd[0].length);\n          } else {\n            const bracketEnd = preferred.endsWith('<>');\n            if (bracketEnd) {\n              parentNode.meta.syntax = 'ANGLE_BRACKET';\n              ret = preferred.slice(0, -2);\n            }\n          }\n        }\n      } else if (type === 'ANY') {\n        node.type = 'NAME';\n      }\n      node.name = ret.replace(/(?:\\.|<>|\\.<>|\\[])$/, '');\n\n      // For bare pseudo-types like `<>`\n      if (!ret) {\n        node.name = nodeName;\n      }\n\n      return ret;\n    };\n\n    traverse(typeAst, (node, parentName, parentNode) => {\n      if (!node) {\n        return;\n      }\n      const {type, name} = node;\n      if (!['NAME', 'ANY'].includes(type)) {\n        return;\n      }\n      let nodeName = type === 'ANY' ? '*' : name;\n\n      const [hasMatchingPreferredType, typeName, isGenericMatch] = getPreferredTypeInfo(type, nodeName, parentName, parentNode);\n\n      let preferred;\n      if (hasMatchingPreferredType) {\n        const preferredSetting = preferredTypes[typeName];\n        nodeName = typeName === '[]' ? typeName : nodeName;\n\n        if (!preferredSetting) {\n          invalidTypes.push([nodeName]);\n        } else if (typeof preferredSetting === 'string') {\n          preferred = preferredSetting;\n          invalidTypes.push([nodeName, preferred]);\n        } else if (typeof preferredSetting === 'object') {\n          preferred = _.get(preferredSetting, 'replacement');\n          invalidTypes.push([\n            nodeName,\n            preferred,\n            _.get(preferredSetting, 'message'),\n          ]);\n        } else {\n          utils.reportSettings(\n            'Invalid `settings.jsdoc.preferredTypes`. Values must be falsy, a string, or an object.'\n          );\n\n          return;\n        }\n      } else if (!noDefaults && type === 'NAME') {\n        for (const strictNativeType of strictNativeTypes) {\n          if (strictNativeType.toLowerCase() === nodeName.toLowerCase() &&\n            strictNativeType !== nodeName &&\n\n            // Don't report if user has own map for a strict native type\n            (!preferredTypes || _.get(preferredTypes, strictNativeType) === undefined)\n          ) {\n            preferred = strictNativeType;\n            invalidTypes.push([nodeName, preferred]);\n            break;\n          }\n        }\n      }\n\n      // For fixer\n      if (preferred) {\n        preferred = adjustNames(type, preferred, isGenericMatch, nodeName, node, parentNode);\n      }\n    });\n\n    if (invalidTypes.length) {\n      const fixedType = publish(typeAst);\n\n      const tagName = jsdocTag.tag;\n      invalidTypes.forEach(([badType, preferredType = '', message]) => {\n        const fix = (fixer) => {\n          return fixer.replaceText(\n            jsdocNode,\n            sourceCode.getText(jsdocNode).replace(\n              `{${jsdocTag.type}}`,\n              `{${fixedType}}`\n            )\n          );\n        };\n\n        const tagValue = jsdocTag.name ? ` \"${jsdocTag.name}\"` : '';\n\n        report(\n          message ||\n            `Invalid JSDoc @${tagName}${tagValue} type \"${badType}\"` +\n            (preferredType ? '; ' : '.') +\n            (preferredType ? `prefer: \"${preferredType}\".` : ''),\n          preferredType ? fix : null,\n          jsdocTag,\n          message ? {\n            tagName,\n            tagValue,\n          } : null\n        );\n      });\n    }\n  });\n}, {\n  iterateAllJsdocs: true,\n  meta: {\n    fixable: 'code',\n    schema: [\n      {\n        additionalProperties: false,\n        properties: {\n          noDefaults: {\n            type: 'boolean',\n          },\n          unifyParentAndChildTypeChecks: {\n            type: 'boolean',\n          },\n        },\n        type: 'object',\n      },\n    ],\n    type: 'suggestion',\n  },\n});\n"],"file":"checkTypes.js"}
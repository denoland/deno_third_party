{"version":3,"sources":["../../src/rules/requireHyphenBeforeParamDescription.js"],"names":["sourceCode","utils","report","context","jsdocNode","always","_","has","options","forEachPreferredTag","jsdocTag","targetTagName","description","startsWith","fixer","lineIndex","line","sourceLines","getText","split","descriptionIndex","lastIndexOf","replacementLine","substring","splice","replacement","join","replaceText","exec","unwantedPart","replace","slice","length","iterateAllJsdocs","meta","fixable","schema","enum","type"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;;;eAEe,2BAAa,CAAC;AAC3BA,EAAAA,UAD2B;AAE3BC,EAAAA,KAF2B;AAG3BC,EAAAA,MAH2B;AAI3BC,EAAAA,OAJ2B;AAK3BC,EAAAA;AAL2B,CAAD,KAMtB;AACJ,MAAIC,MAAJ;;AACA,MAAIC,gBAAEC,GAAF,CAAMJ,OAAO,CAACK,OAAd,EAAuB,CAAvB,CAAJ,EAA+B;AAC7BH,IAAAA,MAAM,GAAGF,OAAO,CAACK,OAAR,CAAgB,CAAhB,MAAuB,QAAhC;AACD,GAFD,MAEO;AACLH,IAAAA,MAAM,GAAG,IAAT;AACD;;AAEDJ,EAAAA,KAAK,CAACQ,mBAAN,CAA0B,OAA1B,EAAmC,CAACC,QAAD,EAAWC,aAAX,KAA6B;AAC9D,QAAI,CAACD,QAAQ,CAACE,WAAd,EAA2B;AACzB;AACD;;AAED,QAAIP,MAAJ,EAAY;AACV,UAAI,CAACK,QAAQ,CAACE,WAAT,CAAqBC,UAArB,CAAgC,GAAhC,CAAL,EAA2C;AACzCX,QAAAA,MAAM,CAAE,kCAAiCS,aAAc,eAAjD,EAAkEG,KAAD,IAAW;AAChF,gBAAMC,SAAS,GAAGL,QAAQ,CAACM,IAA3B;AACA,gBAAMC,WAAW,GAAGjB,UAAU,CAACkB,OAAX,CAAmBd,SAAnB,EAA8Be,KAA9B,CAAoC,IAApC,CAApB,CAFgF,CAIhF;;AACA,gBAAMP,WAAW,GAAGF,QAAQ,CAACE,WAAT,CAAqBO,KAArB,CAA2B,IAA3B,EAAiC,CAAjC,CAApB;AACA,gBAAMC,gBAAgB,GAAGH,WAAW,CAACF,SAAD,CAAX,CAAuBM,WAAvB,CAAmCT,WAAnC,CAAzB;AAEA,gBAAMU,eAAe,GAAGL,WAAW,CAACF,SAAD,CAAX,CACrBQ,SADqB,CACX,CADW,EACRH,gBADQ,IACY,IADZ,GACmBR,WAD3C;AAEAK,UAAAA,WAAW,CAACO,MAAZ,CAAmBT,SAAnB,EAA8B,CAA9B,EAAiCO,eAAjC;AACA,gBAAMG,WAAW,GAAGR,WAAW,CAACS,IAAZ,CAAiB,IAAjB,CAApB;AAEA,iBAAOZ,KAAK,CAACa,WAAN,CAAkBvB,SAAlB,EAA6BqB,WAA7B,CAAP;AACD,SAdK,EAcHf,QAdG,CAAN;AAeD;AACF,KAlBD,MAkBO,IAAIA,QAAQ,CAACE,WAAT,CAAqBC,UAArB,CAAgC,GAAhC,CAAJ,EAA0C;AAC/CX,MAAAA,MAAM,CAAE,mCAAkCS,aAAc,eAAlD,EAAmEG,KAAD,IAAW;AAAA,uBAC1D,OAAOc,IAAP,CAAYlB,QAAQ,CAACE,WAArB,CAD0D;AAAA;AAAA,cAC1EiB,YAD0E;;AAGjF,cAAMJ,WAAW,GAAGzB,UAAU,CAC3BkB,OADiB,CACTd,SADS,EAEjB0B,OAFiB,CAETpB,QAAQ,CAACE,WAFA,EAEaF,QAAQ,CAACE,WAAT,CAAqBmB,KAArB,CAA2BF,YAAY,CAACG,MAAxC,CAFb,CAApB;AAIA,eAAOlB,KAAK,CAACa,WAAN,CAAkBvB,SAAlB,EAA6BqB,WAA7B,CAAP;AACD,OARK,EAQHf,QARG,CAAN;AASD;AACF,GAlCD;AAmCD,CAjDc,EAiDZ;AACDuB,EAAAA,gBAAgB,EAAE,IADjB;AAEDC,EAAAA,IAAI,EAAE;AACJC,IAAAA,OAAO,EAAE,MADL;AAEJC,IAAAA,MAAM,EAAE,CACN;AACEC,MAAAA,IAAI,EAAE,CAAC,QAAD,EAAW,OAAX,CADR;AAEEC,MAAAA,IAAI,EAAE;AAFR,KADM,CAFJ;AAQJA,IAAAA,IAAI,EAAE;AARF;AAFL,CAjDY,C","sourcesContent":["import _ from 'lodash';\nimport iterateJsdoc from '../iterateJsdoc';\n\nexport default iterateJsdoc(({\n  sourceCode,\n  utils,\n  report,\n  context,\n  jsdocNode,\n}) => {\n  let always;\n  if (_.has(context.options, 0)) {\n    always = context.options[0] === 'always';\n  } else {\n    always = true;\n  }\n\n  utils.forEachPreferredTag('param', (jsdocTag, targetTagName) => {\n    if (!jsdocTag.description) {\n      return;\n    }\n\n    if (always) {\n      if (!jsdocTag.description.startsWith('-')) {\n        report(`There must be a hyphen before @${targetTagName} description.`, (fixer) => {\n          const lineIndex = jsdocTag.line;\n          const sourceLines = sourceCode.getText(jsdocNode).split('\\n');\n\n          // Get start index of description, accounting for multi-line descriptions\n          const description = jsdocTag.description.split('\\n')[0];\n          const descriptionIndex = sourceLines[lineIndex].lastIndexOf(description);\n\n          const replacementLine = sourceLines[lineIndex]\n            .substring(0, descriptionIndex) + '- ' + description;\n          sourceLines.splice(lineIndex, 1, replacementLine);\n          const replacement = sourceLines.join('\\n');\n\n          return fixer.replaceText(jsdocNode, replacement);\n        }, jsdocTag);\n      }\n    } else if (jsdocTag.description.startsWith('-')) {\n      report(`There must be no hyphen before @${targetTagName} description.`, (fixer) => {\n        const [unwantedPart] = /-\\s*/.exec(jsdocTag.description);\n\n        const replacement = sourceCode\n          .getText(jsdocNode)\n          .replace(jsdocTag.description, jsdocTag.description.slice(unwantedPart.length));\n\n        return fixer.replaceText(jsdocNode, replacement);\n      }, jsdocTag);\n    }\n  });\n}, {\n  iterateAllJsdocs: true,\n  meta: {\n    fixable: 'code',\n    schema: [\n      {\n        enum: ['always', 'never'],\n        type: 'string',\n      },\n    ],\n    type: 'layout',\n  },\n});\n"],"file":"requireHyphenBeforeParamDescription.js"}
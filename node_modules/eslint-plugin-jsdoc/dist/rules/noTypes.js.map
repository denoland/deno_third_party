{"version":3,"sources":["../../src/rules/noTypes.js"],"names":["utils","tags","getPresentTags","forEach","tag","type","reportJSDoc","meta","fixable"],"mappings":";;;;;;;AAAA;;;;eAEe,2BAAa,CAAC;AAC3BA,EAAAA;AAD2B,CAAD,KAEtB;AACJ,QAAMC,IAAI,GAAGD,KAAK,CAACE,cAAN,CAAqB,CAAC,OAAD,EAAU,KAAV,EAAiB,UAAjB,EAA6B,SAA7B,EAAwC,QAAxC,CAArB,CAAb;AAEAD,EAAAA,IAAI,CAACE,OAAL,CAAcC,GAAD,IAAS;AACpB,QAAIA,GAAG,CAACC,IAAR,EAAc;AACZL,MAAAA,KAAK,CAACM,WAAN,CAAmB,+BAA8BF,GAAG,CAACA,GAAI,GAAzD,EAA6DA,GAA7D,EAAkE,MAAM;AACtEA,QAAAA,GAAG,CAACC,IAAJ,GAAW,EAAX;AACD,OAFD;AAGD;AACF,GAND;AAOD,CAZc,EAYZ;AACDE,EAAAA,IAAI,EAAE;AACJC,IAAAA,OAAO,EAAE,IADL;AAEJH,IAAAA,IAAI,EAAE;AAFF;AADL,CAZY,C","sourcesContent":["import iterateJsdoc from '../iterateJsdoc';\n\nexport default iterateJsdoc(({\n  utils,\n}) => {\n  const tags = utils.getPresentTags(['param', 'arg', 'argument', 'returns', 'return']);\n\n  tags.forEach((tag) => {\n    if (tag.type) {\n      utils.reportJSDoc(`Types are not permitted on @${tag.tag}.`, tag, () => {\n        tag.type = '';\n      });\n    }\n  });\n}, {\n  meta: {\n    fixable: true,\n    type: 'suggestion',\n  },\n});\n"],"file":"noTypes.js"}
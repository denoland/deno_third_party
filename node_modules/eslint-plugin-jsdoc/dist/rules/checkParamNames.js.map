{"version":3,"sources":["../../src/rules/checkParamNames.js"],"names":["Object","entries","validateParameterNames","targetTagName","functionParameterNames","jsdoc","jsdocNode","utils","report","tags","paramTags","filter","tag","name","includes","some","index","tagsIndex","dupeTagInfo","find","tgsIndex","tg","idx","reportJSDoc","splice","functionParameterName","expectedNames","join","actualNames","map","validateParameterNamesDeep","jsdocParameterNames","lastRealParameter","jsdocParameterName","isPropertyPath","pathRootNodeName","slice","indexOf","endsWith","getFunctionParameterNames","jsdocParameterNamesDeep","getJsdocParameterNamesDeep","getPreferredTagName","tagName","isError","meta","fixable","type"],"mappings":"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","sourcesContent":["import entries from 'object.entries-ponyfill';\nimport iterateJsdoc from '../iterateJsdoc';\n\n/* istanbul ignore next */\nif (!Object.entries) {\n  Object.entries = entries;\n}\n\nconst validateParameterNames = (targetTagName : string, functionParameterNames : Array<string>, jsdoc, jsdocNode, utils, report) => {\n  if (!jsdoc || !jsdoc.tags) {\n    return false;\n  }\n\n  const paramTags = Object.entries(jsdoc.tags).filter(([, tag]) => {\n    return tag.tag === targetTagName && !tag.name.includes('.');\n  });\n\n  return paramTags.some(([, tag], index) => {\n    let tagsIndex;\n    const dupeTagInfo = paramTags.find(([tgsIndex, tg], idx) => {\n      tagsIndex = tgsIndex;\n\n      return tg.name === tag.name && idx !== index;\n    });\n    if (dupeTagInfo) {\n      utils.reportJSDoc(`Duplicate @${targetTagName} \"${tag.name}\"`, dupeTagInfo[1], () => {\n        jsdoc.tags.splice(tagsIndex, 1);\n      });\n\n      return true;\n    }\n    const functionParameterName = functionParameterNames[index];\n\n    if (!functionParameterName) {\n      report(\n        `@${targetTagName} \"${tag.name}\" does not match an existing function parameter.`,\n        null,\n        tag\n      );\n\n      return true;\n    }\n\n    if (functionParameterName === '<ObjectPattern>' || functionParameterName === '<ArrayPattern>') {\n      return false;\n    }\n\n    if (functionParameterName !== tag.name) {\n      const expectedNames = functionParameterNames.join(', ');\n      const actualNames = paramTags.map(([, {name}]) => {\n        return name;\n      }).join(', ');\n\n      report(\n        `Expected @${targetTagName} names to be \"${expectedNames}\". Got \"${actualNames}\".`,\n        null,\n        tag\n      );\n\n      return true;\n    }\n\n    return false;\n  });\n};\n\nconst validateParameterNamesDeep = (targetTagName : string, jsdocParameterNames : Array<string>, jsdoc, report : Function) => {\n  let lastRealParameter;\n\n  return jsdocParameterNames.some((jsdocParameterName, idx) => {\n    const isPropertyPath = jsdocParameterName.includes('.');\n\n    if (isPropertyPath) {\n      if (!lastRealParameter) {\n        report(`@${targetTagName} path declaration (\"${jsdocParameterName}\") appears before any real parameter.`, null, jsdoc.tags[idx]);\n\n        return true;\n      }\n\n      let pathRootNodeName = jsdocParameterName.slice(0, jsdocParameterName.indexOf('.'));\n\n      if (pathRootNodeName.endsWith('[]')) {\n        pathRootNodeName = pathRootNodeName.slice(0, -2);\n      }\n\n      if (pathRootNodeName !== lastRealParameter) {\n        report(\n          `@${targetTagName} path declaration (\"${jsdocParameterName}\") root node name (\"${pathRootNodeName}\") ` +\n          `does not match previous real parameter name (\"${lastRealParameter}\").`,\n          null,\n          jsdoc.tags[idx]\n        );\n\n        return true;\n      }\n    } else {\n      lastRealParameter = jsdocParameterName;\n    }\n\n    return false;\n  });\n};\n\nexport default iterateJsdoc(({\n  jsdoc,\n  jsdocNode,\n  report,\n  utils,\n}) => {\n  const functionParameterNames = utils.getFunctionParameterNames();\n  const jsdocParameterNamesDeep = utils.getJsdocParameterNamesDeep();\n  if (!jsdocParameterNamesDeep) {\n    return;\n  }\n  const targetTagName = utils.getPreferredTagName({tagName: 'param'});\n  const isError = validateParameterNames(targetTagName, functionParameterNames, jsdoc, jsdocNode, utils, report);\n\n  if (isError) {\n    return;\n  }\n\n  validateParameterNamesDeep(targetTagName, jsdocParameterNamesDeep, jsdoc, report);\n}, {\n  meta: {\n    fixable: 'code',\n    type: 'suggestion',\n  },\n});\n"],"file":"checkParamNames.js"}
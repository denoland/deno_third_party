{"version":3,"sources":["../../src/rules/requireDescriptionCompleteSentence.js"],"names":["extractParagraphs","text","reverse","join","split","map","par","extractSentences","txt","replace","sentenceEndGrouping","puncts","punct","sentence","idx","test","isNewLinePrecededByAPeriod","lastLineEndsSentence","lines","some","line","isCapitalized","str","toUpperCase","capitalize","charAt","slice","validateDescription","description","reportOrig","jsdocNode","sourceCode","tag","paragraphs","paragraph","parIdx","sentences","fix","fixer","getText","_","last","RegExp","escapeRegExp","filter","sentence_","beginning","reg","$0","$1","replaceText","report","msg","tagObj","column","jsdoc","context","utils","tags","forEachPreferredTag","matchingJsdocTag","name","trim","options","hasOptionTag","tagName","Boolean","includes","getTagsByType","tagsWithNames","tagsWithoutNames","filterTags","trimStart","iterateAllJsdocs","meta","fixable","schema","additionalProperties","properties","items","type"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport {RegExtras} from 'regextras/dist/main-umd';\nimport iterateJsdoc from '../iterateJsdoc';\n\nconst extractParagraphs = (text) => {\n  // Todo [engine:node@>8.11.0]: Uncomment following line with neg. lookbehind instead\n  // return text.split(/(?<![;:])\\n\\n/);\n  return [...text].reverse().join('').split(/\\n\\n(?![;:])/).map((par) => {\n    return [...par].reverse().join('');\n  }).reverse();\n};\n\nconst extractSentences = (text) => {\n  const txt = text\n\n    // Remove all {} tags.\n    .replace(/\\{[\\s\\S]*?\\}\\s*/g, '');\n\n  const sentenceEndGrouping = /([.?!])(?:\\s+|$)/;\n  const puncts = RegExtras(sentenceEndGrouping).map(txt, (punct) => {\n    return punct;\n  });\n\n  return txt\n\n    .split(/[.?!](?:\\s+|$)/)\n\n    // Re-add the dot.\n    .map((sentence, idx) => {\n      return /^\\s*$/.test(sentence) ? sentence : `${sentence}${puncts[idx] || ''}`;\n    });\n};\n\nconst isNewLinePrecededByAPeriod = (text) => {\n  let lastLineEndsSentence;\n\n  const lines = text.split('\\n');\n\n  return !lines.some((line) => {\n    if (typeof lastLineEndsSentence === 'boolean' && !lastLineEndsSentence && /^[A-Z]/.test(line)) {\n      return true;\n    }\n\n    lastLineEndsSentence = /[.:?!]$/.test(line);\n\n    return false;\n  });\n};\n\nconst isCapitalized = (str) => {\n  return str[0] === str[0].toUpperCase();\n};\n\nconst capitalize = (str) => {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n\nconst validateDescription = (description, reportOrig, jsdocNode, sourceCode, tag) => {\n  if (!description) {\n    return false;\n  }\n\n  const paragraphs = extractParagraphs(description);\n\n  return paragraphs.some((paragraph, parIdx) => {\n    const sentences = extractSentences(paragraph);\n\n    const fix = (fixer) => {\n      let text = sourceCode.getText(jsdocNode);\n\n      if (!/[.:?!]$/.test(paragraph)) {\n        const line = _.last(paragraph.split('\\n'));\n\n        text = text.replace(new RegExp(`${_.escapeRegExp(line)}$`, 'm'), `${line}.`);\n      }\n\n      for (const sentence of sentences.filter((sentence_) => {\n        return !(/^\\s*$/).test(sentence_) && !isCapitalized(sentence_);\n      })) {\n        const beginning = sentence.split('\\n')[0];\n\n        if (tag.tag) {\n          const reg = new RegExp(`(@${_.escapeRegExp(tag.tag)}.*)${_.escapeRegExp(beginning)}`);\n\n          text = text.replace(reg, ($0, $1) => {\n            return $1 + capitalize(beginning);\n          });\n        } else {\n          text = text.replace(beginning, capitalize(beginning));\n        }\n      }\n\n      return fixer.replaceText(jsdocNode, text);\n    };\n\n    const report = (msg, fixer, tagObj) => {\n      tagObj.line += parIdx * 2;\n\n      // Avoid errors if old column doesn't exist here\n      tagObj.column = 0;\n      reportOrig(msg, fixer, tagObj);\n    };\n\n    if (sentences.some((sentence) => {\n      return !(/^\\s*$/).test(sentence) && !isCapitalized(sentence);\n    })) {\n      report('Sentence should start with an uppercase character.', fix, tag);\n    }\n\n    if (!/[.!?]$/.test(paragraph)) {\n      report('Sentence must end with a period.', fix, tag);\n\n      return true;\n    }\n\n    if (!isNewLinePrecededByAPeriod(paragraph)) {\n      report('A line of text is started with an uppercase character, but preceding line does not end the sentence.', null, tag);\n\n      return true;\n    }\n\n    return false;\n  });\n};\n\nexport default iterateJsdoc(({\n  sourceCode,\n  jsdoc,\n  report,\n  jsdocNode,\n  context,\n  utils,\n}) => {\n  if (!jsdoc.tags ||\n    validateDescription(jsdoc.description, report, jsdocNode, sourceCode, {\n      line: jsdoc.line + 1,\n    })\n  ) {\n    return;\n  }\n\n  utils.forEachPreferredTag('description', (matchingJsdocTag) => {\n    const description = `${matchingJsdocTag.name} ${matchingJsdocTag.description}`.trim();\n    validateDescription(description, report, jsdocNode, sourceCode, matchingJsdocTag);\n  }, true);\n\n  const options = context.options[0] || {};\n\n  const hasOptionTag = (tagName) => {\n    return Boolean(options.tags && options.tags.includes(tagName));\n  };\n\n  const {tagsWithNames} = utils.getTagsByType(jsdoc.tags);\n  const tagsWithoutNames = utils.filterTags(({tag: tagName}) => {\n    return [\n      // 'copyright' and 'see' might be good addition, but as the former may be\n      //   sensitive text, and the latter may have just a link, they are not\n      //   included by default\n      'summary', 'file', 'fileoverview', 'overview', 'classdesc', 'todo',\n      'deprecated', 'throws', 'exception', 'yields', 'yield',\n    ].includes(tagName) ||\n      hasOptionTag(tagName) && !tagsWithNames.some(({tag}) => {\n        // If user accidentally adds tags with names (or like `returns`\n        //  get parsed as having names), do not add to this list\n        return tag === tagName;\n      });\n  });\n\n  tagsWithNames.some((tag) => {\n    const description = _.trimStart(tag.description, '- ');\n\n    return validateDescription(description, report, jsdocNode, sourceCode, tag);\n  });\n\n  tagsWithoutNames.some((tag) => {\n    const description = `${tag.name} ${tag.description}`.trim();\n\n    return validateDescription(description, report, jsdocNode, sourceCode, tag);\n  });\n}, {\n  iterateAllJsdocs: true,\n  meta: {\n    fixable: 'code',\n    schema: [\n      {\n        additionalProperties: false,\n        properties: {\n          tags: {\n            items: {\n              type: 'string',\n            },\n            type: 'array',\n          },\n        },\n        type: 'object',\n      },\n    ],\n    type: 'suggestion',\n  },\n});\n"],"file":"requireDescriptionCompleteSentence.js"}
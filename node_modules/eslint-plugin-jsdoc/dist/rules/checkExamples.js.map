{"version":3,"sources":["../../src/rules/checkExamples.js"],"names":["zeroBasedLineIndexAdjust","likelyNestedJSDocIndentSpace","preTagSpaceLength","hasCaptionRegex","escapeStringRegexp","str","replace","countChars","ch","match","RegExp","length","report","utils","context","options","exampleCodeRegex","rejectExampleCodeRegex","noDefaultExampleRules","eslintrcForExamples","matchingFileName","filename","paddedIndent","baseConfig","configFile","allowInlineConfig","reportUnusedDisableDirectives","captionRequired","rulePaths","rules","undefined","forEachPreferredTag","tag","targetTagName","firstLinePrefixLength","source","description","trim","test","nonJSPrefacingLines","nonJSPrefacingCols","idx","search","preMatch","slice","preMatchLines","colDelta","lastIndexOf","n0","n1","nonJSPreface","nonJSPrefaceLineCount","index","indexOf","charsInLastLine","cli","CLIEngine","useEslintrc","messages","config","getConfigForFile","cliFile","linter","Linter","executeOnText","error","linterRules","getRules","entries","reduce","obj","key","val","defineRules","parser","defineParser","require","verify","results","codeStartLine","line","codeStartCol","forEach","message","column","severity","ruleId","startLine","startCol","iterateAllJsdocs","meta","schema","additionalProperties","properties","default","type","noTrim"],"mappings":"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","sourcesContent":["import {CLIEngine, Linter} from 'eslint';\nimport iterateJsdoc from '../iterateJsdoc';\nimport warnRemovedSettings from '../warnRemovedSettings';\n\nconst zeroBasedLineIndexAdjust = -1;\nconst likelyNestedJSDocIndentSpace = 1;\nconst preTagSpaceLength = 1;\nconst hasCaptionRegex = /^\\s*<caption>(.*?)<\\/caption>/;\n\nconst escapeStringRegexp = (str) => {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n};\nconst countChars = (str, ch) => {\n  return (str.match(new RegExp(escapeStringRegexp(ch), 'g')) || []).length;\n};\n\nexport default iterateJsdoc(({\n  report,\n  utils,\n  context,\n}) => {\n  warnRemovedSettings(context, 'check-examples');\n  const options = context.options[0] || {};\n  let {\n    exampleCodeRegex = null,\n    rejectExampleCodeRegex = null,\n  } = options;\n  const {\n    noDefaultExampleRules = false,\n    eslintrcForExamples = true,\n    matchingFileName: filename = null,\n    paddedIndent = 0,\n    baseConfig = {},\n    configFile,\n    allowInlineConfig = true,\n    reportUnusedDisableDirectives = true,\n    captionRequired = false,\n  } = options;\n\n  // Make this configurable?\n  const rulePaths = [];\n\n  const rules = noDefaultExampleRules ? undefined : {\n    // \"always\" newline rule at end unlikely in sample code\n    'eol-last': 0,\n\n    // Wouldn't generally expect example paths to resolve relative to JS file\n    'import/no-unresolved': 0,\n\n    // Snippets likely too short to always include import/export info\n    'import/unambiguous': 0,\n\n    // Unlikely to have inadvertent debugging within examples\n    'no-console': 0,\n\n    // Many variables in examples will be `undefined`\n    'no-undef': 0,\n\n    // Common to define variables for clarity without always using them\n    'no-unused-vars': 0,\n\n    // See import/no-unresolved\n    'node/no-missing-import': 0,\n    'node/no-missing-require': 0,\n\n    // Can generally look nicer to pad a little even if code imposes more stringency\n    'padded-blocks': 0,\n  };\n\n  exampleCodeRegex = exampleCodeRegex && new RegExp(exampleCodeRegex, '');\n  rejectExampleCodeRegex = rejectExampleCodeRegex && new RegExp(rejectExampleCodeRegex, '');\n\n  utils.forEachPreferredTag('example', (tag, targetTagName) => {\n    // If a space is present, we should ignore it\n    const firstLinePrefixLength = preTagSpaceLength;\n\n    let source = tag.description;\n    const match = source.match(hasCaptionRegex);\n\n    if (captionRequired && (!match || !match[1].trim())) {\n      report('Caption is expected for examples.', null, tag);\n    }\n\n    // If we allow newlines in hasCaptionRegex, we should add to line count\n    source = source.replace(hasCaptionRegex, '');\n\n    if (exampleCodeRegex && !exampleCodeRegex.test(source) ||\n      rejectExampleCodeRegex && rejectExampleCodeRegex.test(source)\n    ) {\n      return;\n    }\n\n    let nonJSPrefacingLines = 0;\n    let nonJSPrefacingCols = 0;\n\n    if (exampleCodeRegex) {\n      const idx = source.search(exampleCodeRegex);\n\n      // Strip out anything preceding user regex match (can affect line numbering)\n      const preMatch = source.slice(0, idx);\n\n      const preMatchLines = countChars(preMatch, '\\n');\n\n      nonJSPrefacingLines = preMatchLines;\n\n      const colDelta = preMatchLines ?\n        preMatch.slice(preMatch.lastIndexOf('\\n') + 1).length :\n        preMatch.length;\n\n      // Get rid of text preceding user regex match (even if it leaves valid JS, it\n      //   could cause us to count newlines twice)\n      source = source.slice(idx);\n\n      source = source.replace(exampleCodeRegex, (n0, n1) => {\n        let nonJSPreface;\n        let nonJSPrefaceLineCount;\n        if (n1) {\n          const index = n0.indexOf(n1);\n          nonJSPreface = n0.slice(0, index);\n          nonJSPrefaceLineCount = countChars(nonJSPreface, '\\n');\n        } else {\n          nonJSPreface = '';\n          nonJSPrefaceLineCount = 0;\n        }\n\n        nonJSPrefacingLines += nonJSPrefaceLineCount;\n\n        // Ignore `preMatch` delta if newlines here\n        if (nonJSPrefaceLineCount) {\n          const charsInLastLine = nonJSPreface.slice(nonJSPreface.lastIndexOf('\\n') + 1).length;\n\n          nonJSPrefacingCols += charsInLastLine;\n        } else {\n          nonJSPrefacingCols += colDelta + nonJSPreface.length;\n        }\n\n        return n1 || n0;\n      });\n    }\n\n    // Programmatic ESLint API: https://eslint.org/docs/developer-guide/nodejs-api\n    const cli = new CLIEngine({\n      allowInlineConfig,\n      baseConfig,\n      configFile,\n      reportUnusedDisableDirectives,\n      rulePaths,\n      rules,\n      useEslintrc: eslintrcForExamples,\n    });\n\n    let messages;\n\n    if (paddedIndent) {\n      source = source.replace(new RegExp(`(^|\\n) {${paddedIndent}}(?!$)`, 'g'), '\\n');\n    }\n\n    if (filename) {\n      const config = cli.getConfigForFile(filename);\n\n      // We need a new instance to ensure that the rules that may only\n      //  be available to `filename` (if it has its own `.eslintrc`),\n      //  will be defined.\n      const cliFile = new CLIEngine({\n        allowInlineConfig,\n        baseConfig: config,\n        configFile,\n        reportUnusedDisableDirectives,\n        rulePaths,\n        rules,\n        useEslintrc: eslintrcForExamples,\n      });\n\n      const linter = new Linter();\n\n      // Force external rules to become available on `cli`\n      try {\n        cliFile.executeOnText('');\n      } catch (error) {\n        // Ignore\n      }\n\n      const linterRules = [...cliFile.getRules().entries()].reduce((obj, [key, val]) => {\n        obj[key] = val;\n\n        return obj;\n      }, {});\n\n      linter.defineRules(linterRules);\n\n      if (config.parser) {\n        // eslint-disable-next-line global-require, import/no-dynamic-require\n        linter.defineParser(config.parser, require(config.parser));\n      }\n\n      // Could also support `disableFixes` and `allowInlineConfig`\n      messages = linter.verify(source, config, {\n        filename,\n        reportUnusedDisableDirectives,\n      });\n    } else {\n      ({results: [{messages}]} =\n        cli.executeOnText(source));\n    }\n\n    // NOTE: `tag.line` can be 0 if of form `/** @tag ... */`\n    const codeStartLine = tag.line + nonJSPrefacingLines;\n    const codeStartCol = likelyNestedJSDocIndentSpace;\n\n    messages.forEach(({message, line, column, severity, ruleId}) => {\n      const startLine = codeStartLine + line + zeroBasedLineIndexAdjust;\n      const startCol = codeStartCol + (\n\n        // This might not work for line 0, but line 0 is unlikely for examples\n        line <= 1 ? nonJSPrefacingCols + firstLinePrefixLength : preTagSpaceLength\n      ) + column;\n\n      // Could perhaps make fixable\n      report(\n        '@' + targetTagName + ' ' + (severity === 2 ? 'error' : 'warning') +\n          (ruleId ? ' (' + ruleId + ')' : '') + ': ' +\n          message,\n        null,\n        {\n          column: startCol,\n          line: startLine,\n        }\n      );\n    });\n  });\n}, {\n  iterateAllJsdocs: true,\n  meta: {\n    schema: [\n      {\n        additionalProperties: false,\n        properties: {\n          allowInlineConfig: {\n            default: true,\n            type: 'boolean',\n          },\n          baseConfig: {\n            type: 'object',\n          },\n          captionRequired: {\n            default: false,\n            type: 'boolean',\n          },\n          configFile: {\n            type: 'string',\n          },\n          eslintrcForExamples: {\n            default: true,\n            type: 'boolean',\n          },\n          exampleCodeRegex: {\n            type: 'string',\n          },\n          matchingFileName: {\n            type: 'string',\n          },\n          noDefaultExampleRules: {\n            default: false,\n            type: 'boolean',\n          },\n          paddedIndent: {\n            default: 0,\n            type: 'integer',\n          },\n          rejectExampleCodeRegex: {\n            type: 'string',\n          },\n          reportUnusedDisableDirectives: {\n            default: true,\n            type: 'boolean',\n          },\n        },\n        type: 'object',\n      },\n    ],\n    type: 'suggestion',\n  },\n  noTrim: true,\n});\n"],"file":"checkExamples.js"}
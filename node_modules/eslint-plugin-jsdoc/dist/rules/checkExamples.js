"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _eslint = require("eslint");

var _iterateJsdoc = _interopRequireDefault(require("../iterateJsdoc"));

var _warnRemovedSettings = _interopRequireDefault(require("../warnRemovedSettings"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

const zeroBasedLineIndexAdjust = -1;
const likelyNestedJSDocIndentSpace = 1;
const preTagSpaceLength = 1;
const hasCaptionRegex = /^\s*<caption>(.*?)<\/caption>/;

const escapeStringRegexp = str => {
  return str.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
};

const countChars = (str, ch) => {
  return (str.match(new RegExp(escapeStringRegexp(ch), 'g')) || []).length;
};

var _default = (0, _iterateJsdoc.default)(({
  report,
  utils,
  context
}) => {
  (0, _warnRemovedSettings.default)(context, 'check-examples');
  const options = context.options[0] || {};
  let _options$exampleCodeR = options.exampleCodeRegex,
      exampleCodeRegex = _options$exampleCodeR === void 0 ? null : _options$exampleCodeR,
      _options$rejectExampl = options.rejectExampleCodeRegex,
      rejectExampleCodeRegex = _options$rejectExampl === void 0 ? null : _options$rejectExampl;
  const _options$noDefaultExa = options.noDefaultExampleRules,
        noDefaultExampleRules = _options$noDefaultExa === void 0 ? false : _options$noDefaultExa,
        _options$eslintrcForE = options.eslintrcForExamples,
        eslintrcForExamples = _options$eslintrcForE === void 0 ? true : _options$eslintrcForE,
        _options$matchingFile = options.matchingFileName,
        filename = _options$matchingFile === void 0 ? null : _options$matchingFile,
        _options$paddedIndent = options.paddedIndent,
        paddedIndent = _options$paddedIndent === void 0 ? 0 : _options$paddedIndent,
        _options$baseConfig = options.baseConfig,
        baseConfig = _options$baseConfig === void 0 ? {} : _options$baseConfig,
        configFile = options.configFile,
        _options$allowInlineC = options.allowInlineConfig,
        allowInlineConfig = _options$allowInlineC === void 0 ? true : _options$allowInlineC,
        _options$reportUnused = options.reportUnusedDisableDirectives,
        reportUnusedDisableDirectives = _options$reportUnused === void 0 ? true : _options$reportUnused,
        _options$captionRequi = options.captionRequired,
        captionRequired = _options$captionRequi === void 0 ? false : _options$captionRequi; // Make this configurable?

  const rulePaths = [];
  const rules = noDefaultExampleRules ? undefined : {
    // "always" newline rule at end unlikely in sample code
    'eol-last': 0,
    // Wouldn't generally expect example paths to resolve relative to JS file
    'import/no-unresolved': 0,
    // Snippets likely too short to always include import/export info
    'import/unambiguous': 0,
    // Unlikely to have inadvertent debugging within examples
    'no-console': 0,
    // Many variables in examples will be `undefined`
    'no-undef': 0,
    // Common to define variables for clarity without always using them
    'no-unused-vars': 0,
    // See import/no-unresolved
    'node/no-missing-import': 0,
    'node/no-missing-require': 0,
    // Can generally look nicer to pad a little even if code imposes more stringency
    'padded-blocks': 0
  };
  exampleCodeRegex = exampleCodeRegex && new RegExp(exampleCodeRegex, '');
  rejectExampleCodeRegex = rejectExampleCodeRegex && new RegExp(rejectExampleCodeRegex, '');
  utils.forEachPreferredTag('example', (tag, targetTagName) => {
    // If a space is present, we should ignore it
    const firstLinePrefixLength = preTagSpaceLength;
    let source = tag.description;
    const match = source.match(hasCaptionRegex);

    if (captionRequired && (!match || !match[1].trim())) {
      report('Caption is expected for examples.', null, tag);
    } // If we allow newlines in hasCaptionRegex, we should add to line count


    source = source.replace(hasCaptionRegex, '');

    if (exampleCodeRegex && !exampleCodeRegex.test(source) || rejectExampleCodeRegex && rejectExampleCodeRegex.test(source)) {
      return;
    }

    let nonJSPrefacingLines = 0;
    let nonJSPrefacingCols = 0;

    if (exampleCodeRegex) {
      const idx = source.search(exampleCodeRegex); // Strip out anything preceding user regex match (can affect line numbering)

      const preMatch = source.slice(0, idx);
      const preMatchLines = countChars(preMatch, '\n');
      nonJSPrefacingLines = preMatchLines;
      const colDelta = preMatchLines ? preMatch.slice(preMatch.lastIndexOf('\n') + 1).length : preMatch.length; // Get rid of text preceding user regex match (even if it leaves valid JS, it
      //   could cause us to count newlines twice)

      source = source.slice(idx);
      source = source.replace(exampleCodeRegex, (n0, n1) => {
        let nonJSPreface;
        let nonJSPrefaceLineCount;

        if (n1) {
          const index = n0.indexOf(n1);
          nonJSPreface = n0.slice(0, index);
          nonJSPrefaceLineCount = countChars(nonJSPreface, '\n');
        } else {
          nonJSPreface = '';
          nonJSPrefaceLineCount = 0;
        }

        nonJSPrefacingLines += nonJSPrefaceLineCount; // Ignore `preMatch` delta if newlines here

        if (nonJSPrefaceLineCount) {
          const charsInLastLine = nonJSPreface.slice(nonJSPreface.lastIndexOf('\n') + 1).length;
          nonJSPrefacingCols += charsInLastLine;
        } else {
          nonJSPrefacingCols += colDelta + nonJSPreface.length;
        }

        return n1 || n0;
      });
    } // Programmatic ESLint API: https://eslint.org/docs/developer-guide/nodejs-api


    const cli = new _eslint.CLIEngine({
      allowInlineConfig,
      baseConfig,
      configFile,
      reportUnusedDisableDirectives,
      rulePaths,
      rules,
      useEslintrc: eslintrcForExamples
    });
    let messages;

    if (paddedIndent) {
      source = source.replace(new RegExp(`(^|\n) {${paddedIndent}}(?!$)`, 'g'), '\n');
    }

    if (filename) {
      const config = cli.getConfigForFile(filename); // We need a new instance to ensure that the rules that may only
      //  be available to `filename` (if it has its own `.eslintrc`),
      //  will be defined.

      const cliFile = new _eslint.CLIEngine({
        allowInlineConfig,
        baseConfig: config,
        configFile,
        reportUnusedDisableDirectives,
        rulePaths,
        rules,
        useEslintrc: eslintrcForExamples
      });
      const linter = new _eslint.Linter(); // Force external rules to become available on `cli`

      try {
        cliFile.executeOnText('');
      } catch (error) {// Ignore
      }

      const linterRules = [...cliFile.getRules().entries()].reduce((obj, [key, val]) => {
        obj[key] = val;
        return obj;
      }, {});
      linter.defineRules(linterRules);

      if (config.parser) {
        // eslint-disable-next-line global-require, import/no-dynamic-require
        linter.defineParser(config.parser, require(config.parser));
      } // Could also support `disableFixes` and `allowInlineConfig`


      messages = linter.verify(source, config, {
        filename,
        reportUnusedDisableDirectives
      });
    } else {
      var _cli$executeOnText = cli.executeOnText(source);

      var _cli$executeOnText$re = _slicedToArray(_cli$executeOnText.results, 1);

      messages = _cli$executeOnText$re[0].messages;
    } // NOTE: `tag.line` can be 0 if of form `/** @tag ... */`


    const codeStartLine = tag.line + nonJSPrefacingLines;
    const codeStartCol = likelyNestedJSDocIndentSpace;
    messages.forEach(({
      message,
      line,
      column,
      severity,
      ruleId
    }) => {
      const startLine = codeStartLine + line + zeroBasedLineIndexAdjust;
      const startCol = codeStartCol + ( // This might not work for line 0, but line 0 is unlikely for examples
      line <= 1 ? nonJSPrefacingCols + firstLinePrefixLength : preTagSpaceLength) + column; // Could perhaps make fixable

      report('@' + targetTagName + ' ' + (severity === 2 ? 'error' : 'warning') + (ruleId ? ' (' + ruleId + ')' : '') + ': ' + message, null, {
        column: startCol,
        line: startLine
      });
    });
  });
}, {
  iterateAllJsdocs: true,
  meta: {
    schema: [{
      additionalProperties: false,
      properties: {
        allowInlineConfig: {
          default: true,
          type: 'boolean'
        },
        baseConfig: {
          type: 'object'
        },
        captionRequired: {
          default: false,
          type: 'boolean'
        },
        configFile: {
          type: 'string'
        },
        eslintrcForExamples: {
          default: true,
          type: 'boolean'
        },
        exampleCodeRegex: {
          type: 'string'
        },
        matchingFileName: {
          type: 'string'
        },
        noDefaultExampleRules: {
          default: false,
          type: 'boolean'
        },
        paddedIndent: {
          default: 0,
          type: 'integer'
        },
        rejectExampleCodeRegex: {
          type: 'string'
        },
        reportUnusedDisableDirectives: {
          default: true,
          type: 'boolean'
        }
      },
      type: 'object'
    }],
    type: 'suggestion'
  },
  noTrim: true
});

exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=checkExamples.js.map
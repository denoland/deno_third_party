{"version":3,"sources":["../../src/rules/requireParam.js"],"names":["jsdoc","utils","functionParameterNames","getFunctionParameterNames","jsdocParameterNames","getJsdocParameterNames","avoidDocs","hasTag","findExpectedIndex","jsdocTags","funcParmOrder","tagName","docTags","filter","tag","expectedIndex","length","forEach","idx","indexOf","functionParameterName","functionParameterIdx","includes","preferredTagName","getPreferredTagName","reportJSDoc","tags","expectedIdx","splice","name","meta","fixable","schema","additionalProperties","properties","exemptedBy","items","type"],"mappings":";;;;;;;AAAA;;;;eAEe,2BAAa,CAAC;AAC3BA,EAAAA,KAD2B;AAE3BC,EAAAA;AAF2B,CAAD,KAGtB;AACJ,QAAMC,sBAAsB,GAAGD,KAAK,CAACE,yBAAN,EAA/B;AACA,QAAMC,mBAAmB,GAAGH,KAAK,CAACI,sBAAN,EAA5B;;AACA,MAAI,CAACD,mBAAL,EAA0B;AACxB;AACD;;AAED,MAAIH,KAAK,CAACK,SAAN,EAAJ,EAAuB;AACrB;AACD,GATG,CAWJ;;;AACA,MAAIL,KAAK,CAACM,MAAN,CAAa,MAAb,CAAJ,EAA0B;AACxB;AACD;;AACD,QAAMC,iBAAiB,GAAG,CAACC,SAAD,EAAYC,aAAZ,EAA2BC,OAA3B,KAAuC;AAC/D,UAAMC,OAAO,GAAGH,SAAS,CAACI,MAAV,CAAiB,CAAC;AAACC,MAAAA;AAAD,KAAD,KAAW;AAC1C,aAAOA,GAAG,KAAKH,OAAf;AACD,KAFe,CAAhB;AAGA,QAAII,aAAa,GAAGN,SAAS,CAACO,MAA9B;AACAP,IAAAA,SAAS,CAACQ,OAAV,CAAkB,CAACH,GAAD,EAAMI,GAAN,KAAc;AAC9B,UAAIJ,GAAG,CAACA,GAAJ,KAAYH,OAAhB,EAAyB;AACvBI,QAAAA,aAAa,GAAGH,OAAO,CAACO,OAAR,CAAgBL,GAAhB,IAAuBJ,aAAvB,GAAuCQ,GAAG,GAAG,CAA7C,GAAiDA,GAAG,GAAG,CAAvE;AACD;AACF,KAJD;AAMA,WAAOH,aAAP;AACD,GAZD;;AAcAb,EAAAA,sBAAsB,CAACe,OAAvB,CAA+B,CAACG,qBAAD,EAAwBC,oBAAxB,KAAiD;AAC9E,QAAI,CAAC,iBAAD,EAAoB,gBAApB,EAAsCC,QAAtC,CAA+CF,qBAA/C,CAAJ,EAA2E;AACzE;AACD;;AACD,QAAI,CAAChB,mBAAmB,CAACkB,QAApB,CAA6BF,qBAA7B,CAAL,EAA0D;AACxD,YAAMG,gBAAgB,GAAGtB,KAAK,CAACuB,mBAAN,CAA0B;AAACb,QAAAA,OAAO,EAAE;AAAV,OAA1B,CAAzB;AACAV,MAAAA,KAAK,CAACwB,WAAN,CAAmB,kBAAiBF,gBAAiB,KAAIH,qBAAsB,gBAA/E,EAAgG,IAAhG,EAAsG,MAAM;AAC1G,YAAI,CAACpB,KAAK,CAAC0B,IAAX,EAAiB;AACf1B,UAAAA,KAAK,CAAC0B,IAAN,GAAa,EAAb;AACD;;AAED,cAAMC,WAAW,GAAGnB,iBAAiB,CAACR,KAAK,CAAC0B,IAAP,EAAaL,oBAAb,EAAmCE,gBAAnC,CAArC;AACAvB,QAAAA,KAAK,CAAC0B,IAAN,CAAWE,MAAX,CAAkBD,WAAlB,EAA+B,CAA/B,EAAkC;AAChCE,UAAAA,IAAI,EAAET,qBAD0B;AAEhCN,UAAAA,GAAG,EAAES;AAF2B,SAAlC;AAID,OAVD;AAWD;AACF,GAlBD;AAmBD,CAnDc,EAmDZ;AACDO,EAAAA,IAAI,EAAE;AACJC,IAAAA,OAAO,EAAE,IADL;AAEJC,IAAAA,MAAM,EAAE,CACN;AACEC,MAAAA,oBAAoB,EAAE,KADxB;AAEEC,MAAAA,UAAU,EAAE;AACVC,QAAAA,UAAU,EAAE;AACVC,UAAAA,KAAK,EAAE;AACLC,YAAAA,IAAI,EAAE;AADD,WADG;AAIVA,UAAAA,IAAI,EAAE;AAJI;AADF,OAFd;AAUEA,MAAAA,IAAI,EAAE;AAVR,KADM,CAFJ;AAgBJA,IAAAA,IAAI,EAAE;AAhBF;AADL,CAnDY,C","sourcesContent":["import iterateJsdoc from '../iterateJsdoc';\n\nexport default iterateJsdoc(({\n  jsdoc,\n  utils,\n}) => {\n  const functionParameterNames = utils.getFunctionParameterNames();\n  const jsdocParameterNames = utils.getJsdocParameterNames();\n  if (!jsdocParameterNames) {\n    return;\n  }\n\n  if (utils.avoidDocs()) {\n    return;\n  }\n\n  // Param type is specified by type in @type\n  if (utils.hasTag('type')) {\n    return;\n  }\n  const findExpectedIndex = (jsdocTags, funcParmOrder, tagName) => {\n    const docTags = jsdocTags.filter(({tag}) => {\n      return tag === tagName;\n    });\n    let expectedIndex = jsdocTags.length;\n    jsdocTags.forEach((tag, idx) => {\n      if (tag.tag === tagName) {\n        expectedIndex = docTags.indexOf(tag) < funcParmOrder ? idx + 1 : idx - 1;\n      }\n    });\n\n    return expectedIndex;\n  };\n\n  functionParameterNames.forEach((functionParameterName, functionParameterIdx) => {\n    if (['<ObjectPattern>', '<ArrayPattern>'].includes(functionParameterName)) {\n      return;\n    }\n    if (!jsdocParameterNames.includes(functionParameterName)) {\n      const preferredTagName = utils.getPreferredTagName({tagName: 'param'});\n      utils.reportJSDoc(`Missing JSDoc @${preferredTagName} \"${functionParameterName}\" declaration.`, null, () => {\n        if (!jsdoc.tags) {\n          jsdoc.tags = [];\n        }\n\n        const expectedIdx = findExpectedIndex(jsdoc.tags, functionParameterIdx, preferredTagName);\n        jsdoc.tags.splice(expectedIdx, 0, {\n          name: functionParameterName,\n          tag: preferredTagName,\n        });\n      });\n    }\n  });\n}, {\n  meta: {\n    fixable: true,\n    schema: [\n      {\n        additionalProperties: false,\n        properties: {\n          exemptedBy: {\n            items: {\n              type: 'string',\n            },\n            type: 'array',\n          },\n        },\n        type: 'object',\n      },\n    ],\n    type: 'suggestion',\n  },\n});\n"],"file":"requireParam.js"}
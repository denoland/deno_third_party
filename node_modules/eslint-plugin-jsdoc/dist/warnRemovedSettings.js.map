{"version":3,"sources":["../src/warnRemovedSettings.js"],"names":["warnedSettings","WeakMap","hasBeenWarned","context","setting","has","get","markSettingAsWarned","set","Set","add","obj","property","Object","prototype","hasOwnProperty","call","getMovedSettings","ruleName","warnRemovedSettings","movedSettings","settings","jsdoc","report","loc","start","column","line","message"],"mappings":";;;;;;;AAAA;;;;;;;;;;AAUA;AACA,MAAMA,cAAc,GAAG,IAAIC,OAAJ,EAAvB;AAEA;;;;;;;AAMA,MAAMC,aAAa,GAAG,CAACC,OAAD,EAAUC,OAAV,KAAsB;AAC1C,SAAOJ,cAAc,CAACK,GAAf,CAAmBF,OAAnB,KAA+BH,cAAc,CAACM,GAAf,CAAmBH,OAAnB,EAA4BE,GAA5B,CAAgCD,OAAhC,CAAtC;AACD,CAFD;;AAIA,MAAMG,mBAAmB,GAAG,CAACJ,OAAD,EAAUC,OAAV,KAAsB;AAChD,MAAI,CAACJ,cAAc,CAACK,GAAf,CAAmBF,OAAnB,CAAL,EAAkC;AAChCH,IAAAA,cAAc,CAACQ,GAAf,CAAmBL,OAAnB,EAA4B,IAAIM,GAAJ,EAA5B;AACD;;AAEDT,EAAAA,cAAc,CAACM,GAAf,CAAmBH,OAAnB,EAA4BO,GAA5B,CAAgCN,OAAhC;AACD,CAND;AAQA;;;;;;;AAKA,MAAMC,GAAG,GAAG,CAACM,GAAD,EAAMC,QAAN,KAAmB;AAC7B,SAAOC,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCL,GAArC,EAA0CC,QAA1C,CAAP;AACD,CAFD;AAIA;;;;;;;AAKA,MAAMK,gBAAgB,GAAIC,QAAD,IAAc;AACrC,UAAQA,QAAR;AACA,SAAK,eAAL;AACE,aAAO,CAAC,sBAAD,CAAP;;AACF,SAAK,iBAAL;AACE,aAAO,CAAC,oBAAD,CAAP;;AACF,SAAK,aAAL;AACE,aAAO,CAAC,qBAAD,EAAwB,uBAAxB,CAAP;;AACF,SAAK,iBAAL;AACE,aAAO,CAAC,4BAAD,CAAP;;AACF,SAAK,gBAAL;AACE,aAAO,CACL,iBADK,EAEL,kBAFK,EAGL,wBAHK,EAIL,mBAJK,EAKL,uBALK,EAML,kBANK,EAOL,YAPK,EAQL,qBARK,EASL,YATK,EAUL,+BAVK,CAAP;AAVF;AAwBA;;;AACA,SAAO,EAAP;AACD,CA3BD;AA6BA;;;;;;AAIe,SAASC,mBAAT,CAA8BhB,OAA9B,EAAuCe,QAAvC,EAAiD;AAC9D,QAAME,aAAa,GAAGH,gBAAgB,CAACC,QAAD,CAAtC;;AAEA,MAAI,CAACf,OAAO,CAACkB,QAAT,IAAqB,CAAClB,OAAO,CAACkB,QAAR,CAAiBC,KAA3C,EAAkD;AAChD;AACD;;AAL6D;AAAA;AAAA;;AAAA;AAO9D,yBAAsBF,aAAtB,8HAAqC;AAAA,YAA1BhB,OAA0B;;AACnC,UACEC,GAAG,CAACF,OAAO,CAACkB,QAAR,CAAiBC,KAAlB,EAAyBlB,OAAzB,CAAH,IACA,CAACF,aAAa,CAACC,OAAD,EAAUC,OAAV,CAFhB,EAGE;AACAD,QAAAA,OAAO,CAACoB,MAAR,CAAe;AACbC,UAAAA,GAAG,EAAE;AACHC,YAAAA,KAAK,EAAE;AACLC,cAAAA,MAAM,EAAE,CADH;AAELC,cAAAA,IAAI,EAAE;AAFD;AADJ,WADQ;AAObC,UAAAA,OAAO,EAAG,oBAAmBxB,OAAQ,uBAA5B,GACN,6BAA4Bc,QAAS;AAR3B,SAAf;AAUAX,QAAAA,mBAAmB,CAACJ,OAAD,EAAUC,OAAV,CAAnB;AACD;AACF;AAxB6D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAyB/D","sourcesContent":["/**\n * @typedef {(\n *   | \"require-jsdoc\"\n *   | \"require-returns\"\n *   | \"valid-types\"\n *   | \"require-example\"\n *   | \"check-examples\"\n * )} RulesWithMovedSettings\n */\n\n/** @type {WeakMap<object, Set<string>>} */\nconst warnedSettings = new WeakMap();\n\n/**\n * Warn only once for each context and setting\n *\n * @param {object} context\n * @param {string} setting\n */\nconst hasBeenWarned = (context, setting) => {\n  return warnedSettings.has(context) && warnedSettings.get(context).has(setting);\n};\n\nconst markSettingAsWarned = (context, setting) => {\n  if (!warnedSettings.has(context)) {\n    warnedSettings.set(context, new Set());\n  }\n\n  warnedSettings.get(context).add(setting);\n};\n\n/**\n * @param {object} obj\n * @param {string} property\n * @returns {boolean}\n */\nconst has = (obj, property) => {\n  return Object.prototype.hasOwnProperty.call(obj, property);\n};\n\n/**\n *\n * @param {RulesWithMovedSettings} ruleName\n * @returns {string[]}\n */\nconst getMovedSettings = (ruleName) => {\n  switch (ruleName) {\n  case 'require-jsdoc':\n    return ['exemptEmptyFunctions'];\n  case 'require-returns':\n    return ['forceRequireReturn'];\n  case 'valid-types':\n    return ['allowEmptyNamepaths', 'checkSeesForNamepaths'];\n  case 'require-example':\n    return ['avoidExampleOnConstructors'];\n  case 'check-examples':\n    return [\n      'captionRequired',\n      'exampleCodeRegex',\n      'rejectExampleCodeRegex',\n      'allowInlineConfig',\n      'noDefaultExampleRules',\n      'matchingFileName',\n      'configFile',\n      'eslintrcForExamples',\n      'baseConfig',\n      'reportUnusedDisableDirectives',\n    ];\n  }\n\n  /* istanbul ignore next */\n  return [];\n};\n\n/**\n * @param {object} context\n * @param {RulesWithMovedSettings} ruleName\n */\nexport default function warnRemovedSettings (context, ruleName) {\n  const movedSettings = getMovedSettings(ruleName);\n\n  if (!context.settings || !context.settings.jsdoc) {\n    return;\n  }\n\n  for (const setting of movedSettings) {\n    if (\n      has(context.settings.jsdoc, setting) &&\n      !hasBeenWarned(context, setting)\n    ) {\n      context.report({\n        loc: {\n          start: {\n            column: 1,\n            line: 1,\n          },\n        },\n        message: `\\`settings.jsdoc.${setting}\\` has been removed, ` +\n          `use options in the rule \\`${ruleName}\\` instead.`,\n      });\n      markSettingAsWarned(context, setting);\n    }\n  }\n}\n"],"file":"warnRemovedSettings.js"}
error[E0658]: dereferencing raw pointers in constant functions is unstable (see issue #51911)
  --> $DIR/min_const_fn_unsafe.rs:50:77
   |
LL | const fn bad_const_fn_deref_raw(x: *mut usize) -> &'static usize { unsafe { &*x } } //~ is unsafe
   |                                                                             ^^^
   |
   = help: add #![feature(const_raw_ptr_deref)] to the crate attributes to enable

error[E0658]: dereferencing raw pointers in constant functions is unstable (see issue #51911)
  --> $DIR/min_const_fn_unsafe.rs:53:70
   |
LL | const unsafe fn bad_const_unsafe_deref_raw(x: *mut usize) -> usize { *x }
   |                                                                      ^^
   |
   = help: add #![feature(const_raw_ptr_deref)] to the crate attributes to enable

error[E0658]: dereferencing raw pointers in constant functions is unstable (see issue #51911)
  --> $DIR/min_const_fn_unsafe.rs:56:83
   |
LL | const unsafe fn bad_const_unsafe_deref_raw_ref(x: *mut usize) -> &'static usize { &*x }
   |                                                                                   ^^^
   |
   = help: add #![feature(const_raw_ptr_deref)] to the crate attributes to enable

error[E0658]: unions in const fn are unstable (see issue #51909)
  --> $DIR/min_const_fn_unsafe.rs:63:5
   |
LL |     Foo { x: () }.y
   |     ^^^^^^^^^^^^^^^
   |
   = help: add #![feature(const_fn_union)] to the crate attributes to enable

error[E0133]: dereference of raw pointer is unsafe and requires unsafe function or block
  --> $DIR/min_const_fn_unsafe.rs:50:77
   |
LL | const fn bad_const_fn_deref_raw(x: *mut usize) -> &'static usize { unsafe { &*x } } //~ is unsafe
   |                                                                             ^^^ dereference of raw pointer
   |
   = note: raw pointers may be NULL, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

error: aborting due to 5 previous errors

Some errors occurred: E0133, E0658.
For more information about an error, try `rustc --explain E0133`.

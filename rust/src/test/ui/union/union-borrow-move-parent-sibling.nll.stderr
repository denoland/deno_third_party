error[E0502]: cannot borrow `u.y` as immutable because it is also borrowed as mutable
  --> $DIR/union-borrow-move-parent-sibling.rs:15:13
   |
LL |     let a = &mut u.x.0;
   |             ---------- mutable borrow occurs here
LL |     let b = &u.y; //~ ERROR cannot borrow `u.y`
   |             ^^^^ immutable borrow occurs here
LL |     use_borrow(a);
   |                - mutable borrow later used here

error[E0382]: use of moved value: `u`
  --> $DIR/union-borrow-move-parent-sibling.rs:22:13
   |
LL |     let a = u.x.0;
   |             ----- value moved here
LL |     let b = u.y; //~ ERROR use of moved value: `u.y`
   |             ^^^ value used here after move
   |
   = note: move occurs because `u` has type `U`, which does not implement the `Copy` trait

error[E0502]: cannot borrow `u.y` as immutable because it is also borrowed as mutable
  --> $DIR/union-borrow-move-parent-sibling.rs:28:13
   |
LL |     let a = &mut (u.x.0).0;
   |             -------------- mutable borrow occurs here
LL |     let b = &u.y; //~ ERROR cannot borrow `u.y`
   |             ^^^^ immutable borrow occurs here
LL |     use_borrow(a);
   |                - mutable borrow later used here

error[E0382]: use of moved value: `u`
  --> $DIR/union-borrow-move-parent-sibling.rs:35:13
   |
LL |     let a = (u.x.0).0;
   |             --------- value moved here
LL |     let b = u.y; //~ ERROR use of moved value: `u.y`
   |             ^^^ value used here after move
   |
   = note: move occurs because `u` has type `U`, which does not implement the `Copy` trait

error[E0502]: cannot borrow `u.x` as immutable because it is also borrowed as mutable
  --> $DIR/union-borrow-move-parent-sibling.rs:41:13
   |
LL |     let a = &mut *u.y;
   |             --------- mutable borrow occurs here
LL |     let b = &u.x; //~ ERROR cannot borrow `u` (via `u.x`)
   |             ^^^^ immutable borrow occurs here
LL |     use_borrow(a);
   |                - mutable borrow later used here

error[E0382]: use of moved value: `u`
  --> $DIR/union-borrow-move-parent-sibling.rs:48:13
   |
LL |     let a = *u.y;
   |             ---- value moved here
LL |     let b = u.x; //~ ERROR use of moved value: `u.x`
   |             ^^^ value used here after move
   |
   = note: move occurs because `u` has type `U`, which does not implement the `Copy` trait

error: aborting due to 6 previous errors

Some errors occurred: E0382, E0502.
For more information about an error, try `rustc --explain E0382`.

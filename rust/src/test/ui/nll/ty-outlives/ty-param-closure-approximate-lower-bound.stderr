warning: not reporting region error due to nll
  --> $DIR/ty-param-closure-approximate-lower-bound.rs:34:31
   |
LL |     twice(cell, value, |a, b| invoke(a, b));
   |                               ^^^^^^^^^^^^

warning: not reporting region error due to nll
  --> $DIR/ty-param-closure-approximate-lower-bound.rs:42:31
   |
LL |     twice(cell, value, |a, b| invoke(a, b));
   |                               ^^^^^^

warning: not reporting region error due to nll
  --> $DIR/ty-param-closure-approximate-lower-bound.rs:42:31
   |
LL |     twice(cell, value, |a, b| invoke(a, b));
   |                               ^^^^^^^^^^^^

note: External requirements
  --> $DIR/ty-param-closure-approximate-lower-bound.rs:34:24
   |
LL |     twice(cell, value, |a, b| invoke(a, b));
   |                        ^^^^^^^^^^^^^^^^^^^
   |
   = note: defining type: DefId(0/1:14 ~ ty_param_closure_approximate_lower_bound[317d]::generic[0]::{{closure}}[0]) with closure substs [
               T,
               i16,
               for<'r, 's> extern "rust-call" fn((std::option::Option<std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) ()>>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) T))
           ]
   = note: number of external vids: 2
   = note: where T: '_#1r

note: No external requirements
  --> $DIR/ty-param-closure-approximate-lower-bound.rs:32:1
   |
LL | / fn generic<T>(value: T) {
LL | |     let cell = Cell::new(&());
LL | |     twice(cell, value, |a, b| invoke(a, b));
LL | |     //~^ WARNING not reporting region error
LL | |     //
LL | |     // This error from the old region solver looks bogus.
LL | | }
   | |_^
   |
   = note: defining type: DefId(0/0:5 ~ ty_param_closure_approximate_lower_bound[317d]::generic[0]) with substs [
               T
           ]

note: External requirements
  --> $DIR/ty-param-closure-approximate-lower-bound.rs:42:24
   |
LL |     twice(cell, value, |a, b| invoke(a, b));
   |                        ^^^^^^^^^^^^^^^^^^^
   |
   = note: defining type: DefId(0/1:17 ~ ty_param_closure_approximate_lower_bound[317d]::generic_fail[0]::{{closure}}[0]) with closure substs [
               T,
               i16,
               for<'r, 's> extern "rust-call" fn((std::option::Option<std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) ()>>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) T))
           ]
   = note: number of external vids: 2
   = note: where T: '_#1r

error[E0309]: the parameter type `T` may not live long enough
  --> $DIR/ty-param-closure-approximate-lower-bound.rs:42:24
   |
LL |     twice(cell, value, |a, b| invoke(a, b));
   |                        ^^^^^^^^^^^^^^^^^^^
   |
   = help: consider adding an explicit lifetime bound `T: ReFree(DefId(0/0:6 ~ ty_param_closure_approximate_lower_bound[317d]::generic_fail[0]), BrNamed(crate0:DefIndex(1:15), 'a))`...

note: No external requirements
  --> $DIR/ty-param-closure-approximate-lower-bound.rs:41:1
   |
LL | / fn generic_fail<'a, T>(cell: Cell<&'a ()>, value: T) {
LL | |     twice(cell, value, |a, b| invoke(a, b));
LL | |     //~^ WARNING not reporting region error
LL | |     //~| WARNING not reporting region error
LL | |     //~| ERROR the parameter type `T` may not live long enough
LL | | }
   | |_^
   |
   = note: defining type: DefId(0/0:6 ~ ty_param_closure_approximate_lower_bound[317d]::generic_fail[0]) with substs [
               T
           ]

error: aborting due to previous error

For more information about this error, try `rustc --explain E0309`.
